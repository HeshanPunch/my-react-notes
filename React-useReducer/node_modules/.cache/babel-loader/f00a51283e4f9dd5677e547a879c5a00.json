{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hesha\\\\Desktop\\\\AMA-DIT\\\\React\\\\React-useReducer\\\\src\\\\store\\\\auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedin: false,\n  onLogout: () => {},\n  onLogin: (email, password) => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n\n    if (storedUserLoggedInInformation === \"1\") {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n\n  const logInHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      onLogout: logoutHandler,\n      onLogIn: logInHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","AuthContext","createContext","isLoggedin","onLogout","onLogin","email","password","AuthContextProvider","props","isLoggedIn","setIsLoggedIn","useEffect","storedUserLoggedInInformation","localStorage","getItem","logoutHandler","removeItem","logInHandler","setItem","onLogIn","children"],"sources":["C:/Users/hesha/Desktop/AMA-DIT/React/React-useReducer/src/store/auth-context.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst AuthContext = React.createContext({\r\n  isLoggedin: false,\r\n  onLogout: () => {},\r\n  onLogin: (email, password) => {},\r\n});\r\n\r\nexport const AuthContextProvider = (props) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  \r\n  useEffect(() => {\r\n    const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\r\n\r\n    if (storedUserLoggedInInformation === \"1\") {\r\n      setIsLoggedIn(true);\r\n    }\r\n  }, []);\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"isLoggedIn\");\r\n    setIsLoggedIn(false);\r\n  };\r\n\r\n  const logInHandler = (email, password) => {\r\n    // We should of course check email and password\r\n    // But it's just a dummy/ demo anyways\r\n    localStorage.setItem(\"isLoggedIn\", \"1\");\r\n    setIsLoggedIn(true);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ isLoggedIn, onLogout: logoutHandler, onLogIn: logInHandler }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB;EACtCC,UAAU,EAAE,KAD0B;EAEtCC,QAAQ,EAAE,MAAM,CAAE,CAFoB;EAGtCC,OAAO,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB,CAAE;AAHM,CAApB,CAApB;AAMA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;EAAA;;EAC5C,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,KAAD,CAA5C;EAGAY,SAAS,CAAC,MAAM;IACd,MAAMC,6BAA6B,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAtC;;IAEA,IAAIF,6BAA6B,KAAK,GAAtC,EAA2C;MACzCF,aAAa,CAAC,IAAD,CAAb;IACD;EACF,CANQ,EAMN,EANM,CAAT;;EAQA,MAAMK,aAAa,GAAG,MAAM;IAC1BF,YAAY,CAACG,UAAb,CAAwB,YAAxB;IACAN,aAAa,CAAC,KAAD,CAAb;EACD,CAHD;;EAKA,MAAMO,YAAY,GAAG,CAACZ,KAAD,EAAQC,QAAR,KAAqB;IACxC;IACA;IACAO,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAmC,GAAnC;IACAR,aAAa,CAAC,IAAD,CAAb;EACD,CALD;;EAOA,oBACE,QAAC,WAAD,CAAa,QAAb;IACE,KAAK,EAAE;MAAED,UAAF;MAAcN,QAAQ,EAAEY,aAAxB;MAAuCI,OAAO,EAAEF;IAAhD,CADT;IAAA,UAGGT,KAAK,CAACY;EAHT;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,CA/BM;;GAAMb,mB;;KAAAA,mB;AAiCb,eAAeP,WAAf"},"metadata":{},"sourceType":"module"}