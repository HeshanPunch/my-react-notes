import React, { useState, useEffect, useReducer, useContext } from "react";

import Card from "../UI/Card/Card";
import classes from "./Login.module.css";
import Button from "../UI/Button/Button";
import AuthContext from "../../store/auth-context";

//state is the previous state/value of that var, action is the action-event or what has been passed with the dispatch
const emailReducer = (state, action) => {
  if (action.type === "USER_INPUT") {
    return { value: action.val, isValid: action.val.includes("@") }; //value -> the user entered value, isValid -> checks for @ in that value
  }
  if (action.type === "INPUT_BLUR") {
    return { value: state.value, isValid: state.value.includes("@") }; //value -> value in its most recent state, isValid -> if the most recent state is valid
  }
  return { value: "", isValid: false }; //fall back
};

const passwordReducer = (state, action) => {
  //check for what type of event is hapenning
  //if user inputs PW
  if (action.type === "PW_INPUT") {
    return { value: action.val, isValid: action.val.trim().length > 6 }; //action is current values, what is generated by this action-event that trigerred function -- object passed in here with value and "PW_INPUT" tag
  }
  //if user enters "BLUR" state -- clicks out of the pw input block
  if (action.type === "PW_BLUR") {
    return { value: state.value, isValid: state.value.trim().length > 6 }; //state is the most recent/prev state...not related to events. This is just checking for the recent value and sets that as the value when user goes BLUR
  }
  return { value: "", isValid: false }; //fall back3
};

const Login = (props) => {
  // const [enteredEmail, setEnteredEmail] = useState("");
  // const [emailIsValid, setEmailIsValid] = useState();
  // const [enteredPassword, setEnteredPassword] = useState("");
  // const [passwordIsValid, setPasswordIsValid] = useState();
  const [formIsValid, setFormIsValid] = useState(false);

  /*   const [state, dispatch] = useReducer(reducer, initialArg, init); */
  const [emailState, dispatchEmail] = useReducer(emailReducer, {
    value: "",
    isValid: null,
  });

  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {
    value: "",
    isValid: null,
  });
  const authCtx = useContext(AuthContext);

  useEffect(() => {
    console.log("EFFECT RUNNING");

    return () => {
      console.log("EFFECT CLEANUP");
    };
  }, []);

  //pull out the speicific properties you want to use for the useEffect function.
  // in this case we only want to check the validity, not the content changing.
  const { isValid: emailIsValid } = emailState;
  const { isValid: passwordIsValid } = passwordState;

  //useEffect now checks everytime the validity changes for both properties and executes setFormIsValid. ONLY when validity is changed (dependency)
  useEffect(() => {
    const identifier = setTimeout(() => {
      console.log("Checking form validity!");
      setFormIsValid(emailIsValid && passwordIsValid);
    }, 500);

    return () => {
      console.log("CLEANUP");
      clearTimeout(identifier);
    };
  }, [emailIsValid, passwordIsValid]); // dependencies are here...only when these change, and the first time ofc.

  //sends the email function/user action type(tag to identify) and value to reducer
  const emailChangeHandler = (event) => {
    dispatchEmail({ type: "USER_INPUT", val: event.target.value });

    // setFormIsValid(emailState.isValid && passwordState.isValid);
  };
  //sends the PW function/user action type(tag to identify) and value to reducer
  const passwordChangeHandler = (event) => {
    dispatchPassword({ type: "PW_INPUT", val: event.target.value });

    // setFormIsValid(emailState.isValid && passwordState.isValid);
  };
  //this shows the dipatch function what the user has done "Blur" -- to check for validity
  const validateEmailHandler = () => {
    dispatchEmail({ type: "INPUT_BLUR" });
  };
  //this shows the dipatch function what the user has done "Blur" -- to check for validity
  const validatePasswordHandler = () => {
    dispatchPassword({ type: "PW_BLUR" });
  };

  const submitHandler = (event) => {
    event.preventDefault();
    authCtx.onLogIn(emailState.value, passwordState.value); //uses the logic from the dispatch functions
  };

  return (
    <Card className={classes.login}>
      <form onSubmit={submitHandler}>
        <div
          className={`${classes.control} ${
            emailState.isValid === false ? classes.invalid : ""
          }`}
        >
          <label htmlFor="email">E-Mail</label>
          <input
            type="email"
            id="email"
            value={emailState.value} //everything is pulled from the objects involved in reducer
            onChange={emailChangeHandler}
            onBlur={validateEmailHandler}
          />
        </div>
        <div
          className={`${classes.control} ${
            passwordState.isValid === false ? classes.invalid : ""
          }`}
        >
          <label htmlFor="password">Password</label>
          <input
            type="password"
            id="password"
            value={passwordState.value}
            onChange={passwordChangeHandler}
            onBlur={validatePasswordHandler}
          />
        </div>
        <div className={classes.actions}>
          <Button
            type="submit"
            className={classes.btn}
            disabled={!(passwordState.isValid && emailState.isValid)}
          >
            Login
          </Button>
        </div>
      </form>
    </Card>
  );
};

export default Login;
